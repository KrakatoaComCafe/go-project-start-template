// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	model "github.com/krakatoa/go-project-start-template/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// MessageGateway is an autogenerated mock type for the MessageGateway type
type MessageGateway struct {
	mock.Mock
}

type MessageGateway_Expecter struct {
	mock *mock.Mock
}

func (_m *MessageGateway) EXPECT() *MessageGateway_Expecter {
	return &MessageGateway_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: msg
func (_m *MessageGateway) Add(msg model.Message) {
	_m.Called(msg)
}

// MessageGateway_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type MessageGateway_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - msg model.Message
func (_e *MessageGateway_Expecter) Add(msg interface{}) *MessageGateway_Add_Call {
	return &MessageGateway_Add_Call{Call: _e.mock.On("Add", msg)}
}

func (_c *MessageGateway_Add_Call) Run(run func(msg model.Message)) *MessageGateway_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.Message))
	})
	return _c
}

func (_c *MessageGateway_Add_Call) Return() *MessageGateway_Add_Call {
	_c.Call.Return()
	return _c
}

func (_c *MessageGateway_Add_Call) RunAndReturn(run func(model.Message)) *MessageGateway_Add_Call {
	_c.Run(run)
	return _c
}

// GetAll provides a mock function with no fields
func (_m *MessageGateway) GetAll() []model.Message {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []model.Message
	if rf, ok := ret.Get(0).(func() []model.Message); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Message)
		}
	}

	return r0
}

// MessageGateway_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type MessageGateway_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
func (_e *MessageGateway_Expecter) GetAll() *MessageGateway_GetAll_Call {
	return &MessageGateway_GetAll_Call{Call: _e.mock.On("GetAll")}
}

func (_c *MessageGateway_GetAll_Call) Run(run func()) *MessageGateway_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MessageGateway_GetAll_Call) Return(_a0 []model.Message) *MessageGateway_GetAll_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MessageGateway_GetAll_Call) RunAndReturn(run func() []model.Message) *MessageGateway_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// NewMessageGateway creates a new instance of MessageGateway. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMessageGateway(t interface {
	mock.TestingT
	Cleanup(func())
}) *MessageGateway {
	mock := &MessageGateway{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
